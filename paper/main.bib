@misc{di_matteo_abstraction_2024,
	title = {An Abstraction Hierarchy Toward Productive Quantum Programming},
	url = {https://ieeexplore.ieee.org/document/10821267},
	abstract = {Experience from seven decades of classical computing suggests that a sustainable computer industry depends on a community of software engineers writing programs to address a wide variety of specific end-user needs, achieving both performance and utility in the process. Quantum computing is an emerging technology, and we do not yet have the insight to understand what quantum software tools and practices will best support researchers, software engineers, or applications specialists. Developers for today's quantum computers are grappling with the low-level details of the hardware, and progress towards scalable devices does not yet suggest what higher-level abstractions may look like. In this paper, we analyze and reframe the current state of the quantum software stack using the language of programming models. We propose an abstraction hierarchy to support quantum software engineering and discuss the consequences of overlaps across the programming, execution, and hardware models found in current technologies. We exercise this hierarchy for solving the eigenvalue estimation problem in two ways (a variational algorithm with error mitigation, and phase estimation with error correction) and pinpoint key differences in these approaches in terms of these layered models and their overlaps. While our work points to concrete conceptual challenges and gaps in quantum programming and proposes some specific steps forward, our primary thesis is that progress hinges on thinking about the abstraction hierarchy holistically, and not just about its components.},
	language = {en},
	urldate = {2025-08-13},
	journal = {IEEE International Conference on Quantum Computing and Engineering (QCE) 2024},
	author = {Di Matteo, Olivia and Nunez-Corrales, Santiago and Stechly, Michal and Reinhardt, Steven P. and Mattson, Tim},
	month = september,
	year = {2024},
	DOI = {10.1109/qce60285.2024.00117},
}

@article{Cross_2022,
   title={OpenQASM 3: A Broader and Deeper Quantum Assembly Language},
   volume={3},
   ISSN={2643-6817},
   url={http://dx.doi.org/10.1145/3505636},
   DOI={10.1145/3505636},
   number={3},
   journal={ACM Transactions on Quantum Computing},
   publisher={Association for Computing Machinery (ACM)},
   author={Cross, Andrew and Javadi-Abhari, Ali and Alexander, Thomas and De Beaudrap, Niel and Bishop, Lev S. and Heidel, Steven and Ryan, Colm A. and Sivarajah, Prasahnt and Smolin, John and Gambetta, Jay M. and Johnson, Blake R.},
   year={2022},
   month=sep, pages={1–50} 
}


@misc{seidel2024qrispframeworkcompilablehighlevel,
      title={Qrisp: A Framework for Compilable High-Level Programming of Gate-Based Quantum Computers}, 
      author={Raphael Seidel and Sebastian Bock and René Zander and Matic Petrič and Niklas Steinmann and Nikolay Tcholtchev and Manfred Hauswirth},
      year={2024},
      eprint={2406.14792},
      archivePrefix={arXiv},
      primaryClass={quant-ph},
      url={https://arxiv.org/abs/2406.14792}, 
}

@article{shammah_open_2024,
	title = {Open Hardware Solutions in Quantum Technology},
	volume = {1},
	issn = {2835-0103},
	url = {http://arxiv.org/abs/2309.17233},
	doi = {10.1063/5.0180987},
	abstract = {Quantum technologies such as communications, computing, and sensing offer vast opportunities for advanced research and development. While an open-source ethos currently exists within some quantum technologies, especially in quantum computer programming, we argue that there are additional advantages in developing open quantum hardware (OQH). Open quantum hardware encompasses open-source software for the control of quantum devices in labs, blueprints and open-source toolkits for chip design and other hardware components, as well as openly-accessible testbeds and facilities that allow cloud-access to a wider scientific community. We provide an overview of current projects in the OQH ecosystem, identify gaps, and make recommendations on how to close them today. More open quantum hardware would accelerate technology transfer to and growth of the quantum industry and increase accessibility in science.},
	number = {1},
	urldate = {2024-09-09},
	journal = {APL Quantum},
	author = {Shammah, Nathan and Roy, Anurag Saha and Almudever, Carmen G. and Bourdeauducq, Sébastien and Butko, Anastasiia and Cancelo, Gustavo and Clark, Susan M. and Heinsoo, Johannes and Henriet, Loïc and Huang, Gang and Jurczak, Christophe and Kotilahti, Janne and Landra, Alessandro and LaRose, Ryan and Mari, Andrea and Nowrouzi, Kasra and Ockeloen-Korppi, Caspar and Prawiroatmodjo, Guen and Siddiqi, Irfan and Zeng, William J.},
	month = mar,
	year = {2024},
	note = {arXiv:2309.17233 [physics]},
	keywords = {Physics - Applied Physics},
	pages = {011501},
	annote = {Comment: 22 pages, 5 figures},
	file = {arXiv Fulltext PDF:/Users/marcusedwards/Zotero/storage/ANMVI27I/Shammah et al. - 2024 - Open Hardware Solutions in Quantum Technology.pdf:application/pdf;arXiv.org Snapshot:/Users/marcusedwards/Zotero/storage/BVXLYT5I/2309.html:text/html},
}

@misc{edwards_three_2023,
	title = {Three Quantum Programming Language Parser Implementations for the Web},
	url = {http://arxiv.org/abs/2310.10802},
	doi = {10.48550/arXiv.2310.10802},
	abstract = {IBM has developed a quantum assembly (QASM) language particular to gate model quantum computing since 2017 [CBSG17]. Version 3.0 which adds timing, pulse control, and gate modifiers is currently undergoing finalization in 2023 [CJA+21]. In a similar vein, Pakin of Los Alamos National Laboratory published a quantum macro assembler (QMASM) for D-Wave quantum annealers in 2016 [Pak16]. This assembler specifically targets quantum annealers like D-Wave's. A comparable technology that targets continuous-variable (CV) quantum computing is the Blackbird language developed by Xanadu since 2018 [KIQ+19]. We implement parsers for each of these languages in TypeScript with a singular approach. In the cases of Blackbird and QMASM these are the first parser implementations that are web compatible and so bring these languages to a new audience and to new runtimes. This makes the parsing and execution of QMASM, QASM and Blackbird possible in web and mobile environments that don't have access to heavy compile toolchains, enabling adoption and scientific research.},
	urldate = {2024-11-20},
	publisher = {arXiv},
	author = {Edwards, Marcus},
	month = oct,
	year = {2023},
	note = {arXiv:2310.10802},
	keywords = {Computer Science - Programming Languages, Quantum Physics},
	file = {Preprint PDF:/Users/marcusedwards/Zotero/storage/68WTYTLM/Edwards - 2023 - Three Quantum Programming Language Parser Implemen.pdf:application/pdf;Snapshot:/Users/marcusedwards/Zotero/storage/ITANF7WM/2310.html:text/html},
}

@misc{noauthor_qasm_grammar_nodate,
	title = {{OpenQASM} {3.0} {Grammar}},
	url = {https://openqasm.com/grammar/index.html},
	urldate = {2024-11-24},
        note = {https://openqasm.com/grammar/index.html},
}

@misc{noauthor_qec_nodate,
	title = {{QEC} {Decoder} {Toolkit} - {H}-{Series}},
	url = {https://www.quantinuum.com/blog/making-fault-tolerance-a-reality-introducing-our-qec-decoder-toolkit},
	urldate = {2024-11-20},
	file = {QEC Decoder Toolkit - H-Series:/Users/marcusedwards/Zotero/storage/DEG3AT5Z/Quantinuum_hseries_qec_decoder_toolkit.html:text/html},
    note = {https://www.quantinuum.com/blog/making-fault-tolerance-a-reality-introducing-our-qec-decoder-toolkit},
}

@inproceedings{qdmi,
    title = {QDMI -- {Q}uantum {D}evice {M}anagement {I}nterface: A Standardized Interface for Quantum Computing Platforms},
    shorttitle = {{QDMI -- Quantum Device Management Interface}},
    booktitle = {IEEE International Conference on Quantum Computing and Engineering (QCE)},
    author = {Wille, Robert and Schmid, Ludwig and Stade, Yannick and Echavarria, Jorge and Schulz, Martin and Schulz, Laura and Burgholzer, Lukas},
    date = {2024},
}

@misc{noauthor_qiskit_openqasm2_nodate,
	title = {{OpenQasm2} - {Qiskit} {SDK}},
	url = {https://docs.quantum.ibm.com/api/qiskit/qasm2},
	urldate = {2024-11-21},
    note = {https://docs.quantum.ibm.com/api/qiskit/qasm2},
}

@incollection{exman_verification_2024,
	address = {Cham},
	title = {Verification and Validation of Quantum Software},
	isbn = {978-3-031-64135-0 978-3-031-64136-7},
	url = {https://link.springer.com/10.1007/978-3-031-64136-7_5},
	abstract = {Abstract
            Quantum software—like classic software—needs to be designed, specified, developed, and, most importantly, tested by developers. Writing tests is a complex, error-prone, and time-consuming task. Due to the particular properties of quantum physics (e.g., superposition), quantum software is inherently more complex to develop and effectively test than classical software. Nevertheless, some preliminary works have tried to bring commonly used classical testing practices for quantum computing to assess and improve the quality of quantum programs. In this chapter, we first gather 16 quantum software testing techniques that have been proposed for the IBM quantum framework, Qiskit. Then, whenever possible, we illustrate the usage of each technique (through the proposed tool that implements it, if available) on a given running example. We showcase that although several works have been proposed to ease the burn of testing quantum software, we are still in the early stages of testing in the quantum world. Researchers should focus on delivering artifacts that are usable without much hindrance to the rest of the community, and the development of quantum benchmarks should be a priority to facilitate reproducibility, replicability, and comparison between different testing techniques.},
	language = {en},
	urldate = {2024-11-21},
	booktitle = {Quantum {Software}},
	publisher = {Springer Nature Switzerland},
	author = {Fortunato, Daniel and Jiménez-Navajas, Luis and Campos, José and Abreu, Rui},
	editor = {Exman, Iaakov and Pérez-Castillo, Ricardo and Piattini, Mario and Felderer, Michael},
	year = {2024},
	doi = {10.1007/978-3-031-64136-7_5},
	pages = {93--123},
	file = {Full Text:/Users/marcusedwards/Zotero/storage/54MM6VMX/Fortunato et al. - 2024 - Verification and Validation of Quantum Software.pdf:application/pdf},
}

@article{zeng_first_2017,
	title = {First quantum computers need smart software},
	volume = {549},
	copyright = {2017 Springer Nature Limited},
	issn = {1476-4687},
	url = {https://www.nature.com/articles/549149a},
	doi = {10.1038/549149a},
	abstract = {Early devices must solve real-world problems, urge Will Zeng and colleagues.},
	language = {en},
	number = {7671},
	urldate = {2024-08-11},
	journal = {Nature},
	author = {Zeng, Will and Johnson, Blake and Smith, Robert and Rubin, Nick and Reagor, Matt and Ryan, Colm and Rigetti, Chad},
	month = sep,
	year = {2017},
	note = {Publisher: Nature Publishing Group},
	keywords = {Applied physics, Mathematics and computing, Quantum information, Quantum physics},
	pages = {149--151},
	file = {Full Text:/Users/marcusedwards/Zotero/storage/J8BV8J98/Zeng et al. - 2017 - First quantum computers need smart software.pdf:application/pdf},
}

@article{ying_floyd--hoare_2012,
	title = {Floyd--hoare logic for quantum programs},
	volume = {33},
	issn = {0164-0925},
	url = {https://dl.acm.org/doi/10.1145/2049706.2049708},
	doi = {10.1145/2049706.2049708},
	abstract = {Floyd--Hoare logic is a foundation of axiomatic semantics of classical programs, and it provides effective proof techniques for reasoning about correctness of classical programs. To offer similar techniques for quantum program verification and to build a logical foundation of programming methodology for quantum computers, we develop a full-fledged Floyd--Hoare logic for both partial and total correctness of quantum programs. It is proved that this logic is (relatively) complete by exploiting the power of weakest preconditions and weakest liberal preconditions for quantum programs.},
	number = {6},
	urldate = {2024-11-22},
	journal = {ACM Trans. Program. Lang. Syst.},
	author = {Ying, Mingsheng},
	month = jan,
	year = {2012},
	pages = {19:1--19:49},
	file = {Full Text PDF:/Users/marcusedwards/Zotero/storage/CUQGJ2EH/Ying - 2012 - Floyd--hoare logic for quantum programs.pdf:application/pdf},
}

@misc{noauthor_types_nodate,
	title = {Types and {Casting} — {OpenQASM} {Live} {Specification} documentation},
	url = {https://openqasm.com/language/types.html},
	urldate = {2024-11-22},
	file = {Types and Casting — OpenQASM Live Specification documentation:/Users/marcusedwards/Zotero/storage/C7FTLQJZ/types.html:text/html},
    note = {https://openqasm.com/language/types.html},
}

@misc{zhao_qchecker_2023,
	title = {{QChecker}: Detecting Bugs in Quantum Programs via Static Analysis},
	shorttitle = {{QChecker}},
	url = {http://arxiv.org/abs/2304.04387},
	doi = {10.48550/arXiv.2304.04387},
	abstract = {Static analysis is the process of analyzing software code without executing the software. It can help find bugs and potential problems in software that may only appear at runtime. Although many static analysis tools have been developed for classical software, due to the nature of quantum programs, these existing tools are unsuitable for analyzing quantum programs. This paper presents QChecker, a static analysis tool that supports finding bugs in quantum programs in Qiskit. QChecker consists of two main modules: a module for extracting program information based on abstract syntax tree (AST), and a module for detecting bugs based on patterns. We evaluate the performance of QChecker using the Bugs4Q benchmark. The evaluation results show that QChecker can effectively detect various bugs in quantum programs.},
	urldate = {2024-11-25},
	publisher = {arXiv},
	author = {Zhao, Pengzhan and Wu, Xiongfei and Li, Zhuo and Zhao, Jianjun},
	month = apr,
	year = {2023},
	note = {arXiv:2304.04387},
	keywords = {Computer Science - Programming Languages, Computer Science - Software Engineering},
	file = {Preprint PDF:/Users/marcusedwards/Zotero/storage/D29EPA49/Zhao et al. - 2023 - QChecker Detecting Bugs in Quantum Programs via S.pdf:application/pdf;Snapshot:/Users/marcusedwards/Zotero/storage/QNX2SHXM/2304.html:text/html},
}

@misc{osaka_2025,
	author = {Aso, Noriyasu and Feluś, Karolina and Gaj, Adrian and Gokita, Shun and Góralczyk, Sławomir and Kakuko, Norihiro and Masumoto, Naoyuki and Miyaji, Kosuke and Miyanaga, Takafumi and Mori, Toshio and Noda, Kunihiro and Tsukano, Satoyuki and Ymaguchi, Masaomi and Żybort, Dobrosław},
	month = {9},
	title = {OQTOPUS Cloud},
	url = {https://github.com/oqtopus-team/oqtopus-cloud},
	year = {2024}
}
